
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 18 12:17:44 CET 2022
//----------------------------------------------------

import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 18 12:17:44 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\006\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\006\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\004\000" +
    "\002\012\004\000\002\012\003\000\002\013\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\005" +
    "\004\000\002\005\003\000\002\014\012\000\002\014\006" +
    "\000\002\014\007\000\002\014\007\000\002\014\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\015\004" +
    "\000\002\023\004\000\002\023\003\000\002\024\005\000" +
    "\002\017\005\000\002\017\003\000\002\020\005\000\002" +
    "\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\004\005\001\002\000\004\002\124\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\011\001\002\000\004\002\001\001\002\000" +
    "\010\020\015\021\013\022\017\001\002\000\022\007\011" +
    "\013\042\020\015\021\013\022\017\023\043\025\036\026" +
    "\044\001\002\000\004\013\ufff4\001\002\000\004\013\021" +
    "\001\002\000\004\013\ufff5\001\002\000\022\007\ufffd\013" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\026\ufffd" +
    "\001\002\000\004\013\ufff3\001\002\000\006\011\ufffa\012" +
    "\ufffa\001\002\000\004\014\026\001\002\000\006\011\024" +
    "\012\023\001\002\000\004\013\021\001\002\000\022\007" +
    "\ufffc\013\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\026\ufffc\001\002\000\006\011\ufffb\012\ufffb\001\002\000" +
    "\010\011\ufff7\012\ufff7\015\ufff7\001\002\000\010\011\ufff9" +
    "\012\ufff9\015\031\001\002\000\010\011\ufff8\012\ufff8\015" +
    "\ufff8\001\002\000\004\016\032\001\002\000\004\017\033" +
    "\001\002\000\010\011\ufff6\012\ufff6\015\ufff6\001\002\000" +
    "\004\033\121\001\002\000\016\007\uffec\010\uffec\013\uffec" +
    "\023\uffec\025\uffec\026\uffec\001\002\000\004\005\112\001" +
    "\002\000\016\007\011\010\111\013\042\023\043\025\036" +
    "\026\044\001\002\000\022\007\ufffe\013\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\025\ufffe\026\ufffe\001\002\000\016" +
    "\007\ufff1\010\ufff1\013\ufff1\023\ufff1\025\ufff1\026\ufff1\001" +
    "\002\000\004\014\103\001\002\000\004\005\073\001\002" +
    "\000\004\005\045\001\002\000\010\005\052\013\042\016" +
    "\046\001\002\000\022\006\uffe4\011\uffe4\012\uffe4\017\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000\022\006" +
    "\uffe6\011\uffe6\012\uffe6\017\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\001\002\000\022\006\uffe9\011\uffe9\012\uffe9\017" +
    "\uffe9\027\uffe9\030\uffe9\031\064\032\065\001\002\000\022" +
    "\006\uffe5\011\uffe5\012\uffe5\017\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\001\002\000\010\005\052\013\042\016\046" +
    "\001\002\000\012\006\uffdb\012\uffdb\027\062\030\061\001" +
    "\002\000\006\006\056\012\055\001\002\000\010\005\052" +
    "\013\042\016\046\001\002\000\004\011\057\001\002\000" +
    "\016\007\uffed\010\uffed\013\uffed\023\uffed\025\uffed\026\uffed" +
    "\001\002\000\012\006\uffdc\012\uffdc\027\062\030\061\001" +
    "\002\000\010\005\052\013\042\016\046\001\002\000\010" +
    "\005\052\013\042\016\046\001\002\000\022\006\uffeb\011" +
    "\uffeb\012\uffeb\017\uffeb\027\uffeb\030\uffeb\031\064\032\065" +
    "\001\002\000\010\005\052\013\042\016\046\001\002\000" +
    "\010\005\052\013\042\016\046\001\002\000\022\006\uffe7" +
    "\011\uffe7\012\uffe7\017\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\001\002\000\022\006\uffe8\011\uffe8\012\uffe8\017\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\022\006" +
    "\uffea\011\uffea\012\uffea\017\uffea\027\uffea\030\uffea\031\064" +
    "\032\065\001\002\000\010\006\072\027\062\030\061\001" +
    "\002\000\022\006\uffe3\011\uffe3\012\uffe3\017\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\001\002\000\010\020\015\021" +
    "\013\022\017\001\002\000\004\013\075\001\002\000\004" +
    "\024\076\001\002\000\004\013\077\001\002\000\004\006" +
    "\100\001\002\000\014\007\011\013\042\023\043\025\036" +
    "\026\044\001\002\000\016\007\ufff0\010\ufff0\013\ufff0\023" +
    "\ufff0\025\ufff0\026\ufff0\001\002\000\026\006\uffe2\011\uffe2" +
    "\012\uffe2\015\104\017\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\001\002\000\026\006\uffe0\011\uffe0\012\uffe0" +
    "\015\uffe0\017\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\001\002\000\010\005\052\013\042\016\046\001\002" +
    "\000\026\006\uffe1\011\uffe1\012\uffe1\015\uffe1\017\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\001\002\000\010" +
    "\017\107\027\062\030\061\001\002\000\026\006\uffdf\011" +
    "\uffdf\012\uffdf\015\uffdf\017\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\001\002\000\016\007\ufff2\010\ufff2\013" +
    "\ufff2\023\ufff2\025\ufff2\026\ufff2\001\002\000\020\002\uffff" +
    "\007\uffff\010\uffff\013\uffff\023\uffff\025\uffff\026\uffff\001" +
    "\002\000\004\013\042\001\002\000\006\006\uffdd\012\uffdd" +
    "\001\002\000\006\006\116\012\115\001\002\000\004\013" +
    "\042\001\002\000\004\011\117\001\002\000\016\007\uffee" +
    "\010\uffee\013\uffee\023\uffee\025\uffee\026\uffee\001\002\000" +
    "\006\006\uffde\012\uffde\001\002\000\010\005\052\013\042" +
    "\016\046\001\002\000\010\011\123\027\062\030\061\001" +
    "\002\000\016\007\uffef\010\uffef\013\uffef\023\uffef\025\uffef" +
    "\026\uffef\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\002\001\001\000\010\004\011\006\015\007\013\001" +
    "\001\000\016\003\034\005\036\006\037\007\013\014\040" +
    "\015\033\001\001\000\002\001\001\000\006\010\021\011" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\026\001\001\000" +
    "\002\001\001\000\004\011\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\034\014\107\015\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\050" +
    "\016\052\020\053\021\047\022\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\050\016\070\021\047\022\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\050\016\057" +
    "\021\047\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\050\021\067\022\046" +
    "\001\001\000\010\015\050\021\062\022\046\001\001\000" +
    "\002\001\001\000\006\015\050\022\066\001\001\000\006" +
    "\015\050\022\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\034" +
    "\014\100\015\033\001\001\000\002\001\001\000\004\024" +
    "\104\001\001\000\002\001\001\000\012\015\050\016\105" +
    "\021\047\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\112\017\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\050\016" +
    "\121\021\047\022\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpressionList ::= Expression 
            {
              Object RESULT =null;
		
    System.out.println("smena 38");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
    System.out.println("smena 37");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarList ::= Variable 
            {
              Object RESULT =null;
		
    System.out.println("smena 36");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarList ::= VarList COMMA Variable 
            {
              Object RESULT =null;
		
    System.out.println("smena 35");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Index ::= LB Expression RB 
            {
              Object RESULT =null;
		
    System.out.println("smena 34");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Index",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IndexList ::= EPSILON 
            {
              Object RESULT =null;
		
    System.out.println("smena 33");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndexList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IndexList ::= IndexList Index 
            {
              Object RESULT =null;
		
    System.out.println("smena 32");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndexList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Variable ::= ID IndexList 
            {
              Object RESULT =null;
		
    System.out.println("smena 31");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;
		
    System.out.println("smena 30");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Factor ::= CONST 
            {
              Object RESULT =null;
		
    System.out.println("smena 29");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Factor ::= Variable 
            {
              Object RESULT =null;
		
    System.out.println("smena 28");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Factor 
            {
              Object RESULT =null;
		
    System.out.println("smena 27");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
    System.out.println("smena 26");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
    System.out.println("smena 25");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Term 
            {
              Object RESULT =null;
		
    System.out.println("smena 24");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression MIN Term 
            {
              Object RESULT =null;
		
    System.out.println("smena 23");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression PLUS Term 
            {
              Object RESULT =null;
		
    System.out.println("smena 22");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= Block 
            {
              Object RESULT =null;
		
    System.out.println("smena 21");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= write LP ExpressionList RP SEMI 
            {
              Object RESULT =null;
		
    System.out.println("smena 20");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= read LP VarList RP SEMI 
            {
              Object RESULT =null;
		
    System.out.println("smena 19");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= Variable ASSIGN Expression SEMI 
            {
              Object RESULT =null;
		
    System.out.println("smena 18");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= _for LP Type ID in ID RP Statement 
            {
              Object RESULT =null;
		
    System.out.println("smena 17");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= Statement 
            {
              Object RESULT =null;
		
    System.out.println("smena 16");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;
		
    System.out.println("smena 15");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= _real 
            {
              Object RESULT =null;
		
 System.out.println("smena 14");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= _char 
            {
              Object RESULT =null;
		
    System.out.println("smena13");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= _int 
            {
              Object RESULT =null;
		
    System.out.println("smena 12");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Dimenssion ::= LB CONST RB 
            {
              Object RESULT =null;
		
    System.out.println("smena11");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dimenssion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DimList ::= EPSILON 
            {
              Object RESULT =null;
		
    System.out.println("smena 10");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DimList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DimList ::= DimList Dimenssion 
            {
              Object RESULT =null;
		
    System.out.println("smena9");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DimList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Name ::= ID DimList 
            {
              Object RESULT =null;
		
    System.out.println("smena8");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= Name 
            {
              Object RESULT =null;
		
    System.out.println("smena7");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA Name 
            {
              Object RESULT =null;
		
    System.out.println("smena6");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMI 
            {
              Object RESULT =null;
		
    System.out.println("smena 5");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarSection ::= VarDecl 
            {
              Object RESULT =null;
		
    System.out.println("smena4");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarSection",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarSection ::= VarSection VarDecl 
            {
              Object RESULT =null;
		
    System.out.println("smena3");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarSection",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LCB VarSection StatementList RCB 
            {
              Object RESULT =null;
		
    System.out.println("smena 2");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LP RP Block 
            {
              Object RESULT =null;
		
    System.out.println("smena 1");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

